spring:
  application:
    name: hzero-orchestration-manager
  web:
    resources:
      # 资源缓存时间，单位秒
      cache:
        period: 3600
      chain:
        # 开启压缩
        compressed: true
        # 启用缓存
        cache: true
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:mysql://db.hzero.org:3306/hzero_orchestration?useUnicode=true&characterEncoding=utf-8&useSSL=false}
    username: ${SPRING_DATASOURCE_USERNAME:hzero}
    password: ${SPRING_DATASOURCE_PASSWORD:hzero}
    hikari:
      # 连接池最小空闲连接数
      minimum-idle: ${SPRING_DATASOURCE_MINIMUM_IDLE:20}
      # 连接池允许的最大连接数
      maximum-pool-size: ${SPRING_DATASOURCE_MAXIMUM_POOL_SIZE:200}
      # 等待连接池分配连接的最大时长（毫秒）
      connection-timeout: ${SPRING_DATASOURCE_CONNECTION_TIMEOUT:30000}
  redis:
    host: ${SPRING_REDIS_HOST:redis.hzero.org}
    port: ${SPRING_REDIS_PORT:6379}
    database: ${SPRING_REDIS_DATABASE:1}
    # Redis连接超时时间
    connect-timeout: ${SPRING_REDIS_CONNECT_TIMEOUT:2000}
    # Redis读取超时时间
    timeout: ${SPRING_REDIS_READ_TIMEOUT:5000}
    lettuce:
      pool:
        # 资源池中最大连接数
        # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整
        max-active: ${SPRING_REDIS_POOL_MAX_ACTIVE:50}
        # 资源池运行最大空闲的连接数
        # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整，一般建议和max-active保持一致，避免资源伸缩带来的开销
        max-idle: ${SPRING_REDIS_POOL_MAX_IDLE:50}
        # 当资源池连接用尽后，调用者的最大等待时间(单位为毫秒)
        # 默认 -1 表示永不超时，设置5秒
        max-wait: ${SPRING_REDIS_POOL_MAX_WAIT:5000}
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 100MB
server:
  undertow:
    threads:
      # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接
      # 默认值为8，建议设置每个CPU核心一个线程
      io: ${SERVER_UNDERTOW_IO_THREADS:4}
      # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程
      # 默认等于 io-threads*8，它的值设置取决于系统的负载，可适当调大该值
      worker: ${SERVER_UNDERTOW_WORKER_THREADS:128}
    # 每块buffer的空间大小，越小空间被利用越充分
    # 不要设置太大，以免影响其他应用，合适即可
    buffer-size: ${SERVER_UNDERTOW_BUFFER_SIZE:1024}
    # 是否分配的直接内存(NIO直接分配的堆外内存)。默认false
    direct-buffers: true
    # HTTP POST请求最大的大小。默认0，无限制，可设置10M
    max-http-post-size: 10485760
feign:
  circuitbreaker:
    # 启用断路器
    enabled: ${FEIGN_CIRCUITBREAKER_ENABLED:true}
  # 请求压缩配置
  compression:
    request:
      # 配置请求GZIP压缩
      enabled: ${FEIGN_COMPRESSION_REQUEST_ENABLED:true}
      # 配置压缩数据大小的下限
      min-request-size: ${FEIGN_COMPRESSION_REQUEST_MIN_REQUEST_SIZE:2048}
  # Feign客户端配置
  client:
    config:
      # Feign客户端默认配置
      default:
        # 连接超时
        connectTimeout: ${FEIGN_CLIENT_CONFIG_DEFAULT_CONNECT_TIMEOUT:2000}
        # 读取超时
        readTimeout: ${FEIGN_CLIENT_CONFIG_DEFAULT_READ_TIMEOUT:5000}
        # Feign日志级别：NONE/BASIC/HEADERS/FULL
        loggerLevel: ${FEIGN_CLIENT_CONFIG_DEFAULT_LOGGER_LEVEL:FULL}
hystrix:
  threadpool:
    default:
      # 执行命令线程池的核心线程数，也是命令执行的最大并发量
      # 默认10
      coreSize: ${HYSTRIX_THREADPOOL_DEFAULT_CORE_SIZE:100}
      # 最大执行线程数
      maximumSize: ${HYSTRIX_THREADPOOL_DEFAULT_MAXIMUM_SIZE:200}
      # BlockingQueue的最大队列数，默认值-1
      maxQueueSize: ${HYSTRIX_THREADPOOL_DEFAULT_MAX_QUEUE_SIZE:1000}
      # 即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝，默认值5, 需与maxQueueSize同时使用
      queueSizeRejectionThreshold: ${HYSTRIX_THREADPOOL_DEFAULT_QUEUE_SIZE_REJECTION_THRESHOLD:1000}
  command:
    default:
      execution:
        isolation:
          thread:
            # HystrixCommand 执行的超时时间，超时后进入降级处理逻辑。一个接口，理论的最佳响应速度应该在200ms以内，或者慢点的接口就几百毫秒。
            # 默认 1000 毫秒，最高设置 2000足矣。如果超时，首先看能不能优化接口相关业务、SQL查询等，不要盲目加大超时时间，否则会导致线程堆积过多，hystrix 线程池卡死，最终服务不可用。
            timeoutInMilliseconds: ${HYSTRIX_COMMAND_TIMEOUT_IN_MILLISECONDS:40000}
ribbon:
  # 客户端读取超时时间，超时时间要小于Hystrix的超时时间，否则重试机制就无意义了
  ReadTimeout: ${RIBBON_READ_TIMEOUT:30000}
  # 客户端连接超时时间
  ConnectTimeout: ${RIBBON_CONNECT_TIMEOUT:3000}
  # 访问实例失败(超时)，允许自动重试，设置重试次数，失败后会更换实例访问，请一定确保接口的幂等性，否则重试可能导致数据异常。
  OkToRetryOnAllOperations: true
  MaxAutoRetries: 1
  MaxAutoRetriesNextServer: 1
mybatis:
  mapperLocations: classpath*:/mapper/*.xml
  configuration:
    mapUnderscoreToCamelCase: true
hzero:
  # 分布式锁配置
  lock:
    pattern: single
    single-server:
      address: ${HZERO_LOCK_REDIS_HOST:${spring.redis.host}}
      port: ${HZERO_LOCK_REDIS_PORT:${spring.redis.port}}
      database: ${HZERO_LOCK_REDIS_DATABASE:${spring.redis.database}}
  data:
    permission:
      db-owner: ${HZERO_DB_OWNER:}
    # 开启数据拦截
    change:
      enable: true
  # 开启数据审计
  audit:
    data:
      enable: true
  modular:
    enable: false
  resource:
    pattern: ${HZERO_RESOURCE_PATTERN:/v1/*,/hzero/*,/hrcm/v1/*,/hrcm/hzero/*,/v2/*}
  orchestration:
    nettyEpollEnabled: ${HZERO_ORCHESTRATION_NETTY_EPOLL_ENABLED:true}
    distributed:
      type: ${HZERO_ORCHESTRATION_DISTRIBUTED_TYPE:standAlone}
      alert-code: ${HZERO_ORCHESTRATION_ALERT_CODE:HORC_SERVER_OFFLINE}
      server-list: ${HZERO_ORCHESTRATION_DISTRIBUTED_SERVER_LIST:distributed.register1.hzero.org:2181,distributed.register2.hzero.org:2181,distributed.register3.hzero.org:2181}
      manager:
        listen-port: ${HZERO_ORCHESTRATION_MANAGER_PORT:15679}
        worker-listen-port: ${HZERO_ORCHESTRATION_WORKER_PORT:12345}
        ipAddress: ${HZERO_ORCHESTRATION_WORKER_IP:0.0.0.0}
logging:
  level:
    org.springframework.cloud: info
    io.github.resilience4j: info
    com.netflix.discovery: warn
    org.hzero.boot.platform.lov: info
    org.apache.ibatis: ${LOG_LEVEL:info}
    io.choerodon: ${LOG_LEVEL:info}
    org.hzero: ${LOG_LEVEL:info}
    org.jipaas: ${LOG_LEVEL:info}
  config: classpath:log4j2-spring.xml
seata:
  enabled: false
  tx-service-group: hzero_tx_group
  service:
    vgroup-mapping:
      hzero_tx_group: seata-server
    disable-global-transaction: true
  registry:
    type: eureka
    eureka:
      weight: 1
      service-url: ${EUREKA_DEFAULT_ZONE:http://dev.hzero.org:8000/eureka}
